Spring Boot 애플리케이션에서 HikariCP를 사용하여 데이터베이스 연결을 설정하는 경우, 데이터베이스 연결 실패 시 애플리케이션을 종료할 수 있습니다. 이 기능은 일반적으로 애플리케이션이 정상적으로 시작되기 위해 필수적인 데이터베이스 연결이 필요할 때 사용됩니다.

이를 구현하는 방법은 다음과 같습니다:

### 1. **Spring Boot의 기본 동작**

기본적으로 Spring Boot는 데이터베이스 연결에 실패하면 예외를 던지고 애플리케이션이 시작되지 않습니다. 이는 Spring Boot가 `DataSource` 빈을 초기화할 때 데이터베이스 연결을 시도하기 때문입니다. 연결이 실패하면 Spring Boot는 애플리케이션 시작을 중단합니다.

### 2. **커넥션 실패 시 서버 셧다운 설정**

만약 데이터베이스 연결을 직접 설정하고 싶다면, 커넥션을 설정하는 로직에서 예외를 처리하고, 예외 발생 시 애플리케이션을 종료할 수 있습니다.

```java
import com.zaxxer.hikari.HikariConfig;
import com.zaxxer.hikari.HikariDataSource;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import javax.sql.DataSource;

@Configuration
public class DatabaseConfig {

    @Value("${spring.datasource.url}")
    private String url;

    @Value("${spring.datasource.username}")
    private String username;

    @Value("${spring.datasource.password}")
    private String password;

    @Value("${spring.datasource.driver-class-name}")
    private String driverClassName;

    @Bean
    public DataSource dataSource() {
        HikariConfig hikariConfig = new HikariConfig();
        hikariConfig.setJdbcUrl(url);
        hikariConfig.setUsername(username);
        hikariConfig.setPassword(password);
        hikariConfig.setDriverClassName(driverClassName);

        try {
            HikariDataSource dataSource = new HikariDataSource(hikariConfig);
            dataSource.getConnection(); // 커넥션 테스트
            return dataSource;
        } catch (Exception e) {
            System.err.println("Failed to connect to the database: " + e.getMessage());
            // 애플리케이션 종료
            System.exit(1);
            return null; // 실행되지 않음, 시스템이 종료됨
        }
    }
}
```

### 3. **Spring Boot 애플리케이션 종료**

- **`System.exit(1)`**: `System.exit(1)`을 호출하면 애플리케이션이 종료됩니다. 여기서 `1`은 비정상 종료를 나타내는 상태 코드입니다. 이 코드는 데이터베이스 연결 실패와 같은 중대한 오류가 발생했음을 나타냅니다.

### 4. **HikariCP에 내장된 연결 테스트**

HikariCP는 연결 풀을 생성할 때 기본적으로 최소한의 연결 테스트를 수행합니다. 이는 다음 설정을 통해 제어할 수 있습니다:

- **`hikari.connection-test-query`**: 연결을 테스트하기 위해 실행할 SQL 쿼리.
- **`hikari.validation-timeout`**: 연결을 검증하는 데 사용할 최대 시간.

예를 들어, `application.properties`에 이러한 설정을 추가하여 연결을 테스트할 수 있습니다:

```properties
spring.datasource.hikari.connection-test-query=SELECT 1
spring.datasource.hikari.validation-timeout=3000
```

### 5. **Spring Boot의 기본 데이터베이스 자동 구성 사용**

대부분의 경우, Spring Boot는 데이터베이스와 관련된 자동 구성을 제공합니다. 만약 커넥션 설정이 간단하다면, Spring Boot의 기본 `application.properties` 파일에 설정을 추가하는 방법이 더 간단할 수 있습니다:

```properties
spring.datasource.url=jdbc:mysql://localhost:3306/mydb
spring.datasource.username=myuser
spring.datasource.password=mypassword
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.hikari.connection-test-query=SELECT 1
```

이 경우, Spring Boot는 자동으로 HikariCP를 사용하여 데이터베이스 연결을 설정하며, 연결 실패 시 애플리케이션이 자동으로 종료됩니다.

### 결론

Spring Boot에서 HikariCP를 사용하여 데이터베이스 연결을 설정하는 경우, 연결 실패 시 애플리케이션을 종료하는 방법은 `System.exit(1)`을 사용하는 것입니다. 이는 데이터베이스가 애플리케이션의 필수 구성 요소일 때 매우 유용하며, 애플리케이션이 정상적으로 시작되지 않도록 보장할 수 있습니다. HikariCP의 내장된 연결 테스트 기능을 활용하면 보다 안정적으로 연결을 테스트하고, 실패 시 조치를 취할 수 있습니다.