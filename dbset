import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;

public class SecurityConfig extends WebSecurityConfigurerAdapter {

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http
            .authorizeRequests()
                .antMatchers("/h2-console/**").permitAll()  // H2 콘솔 접근 허용
                .anyRequest().authenticated()
                .and()
            .csrf()
                .ignoringAntMatchers("/h2-console/**")  // CSRF 보호 해제
                .and()
            .headers()
                .frameOptions().disable();  // X-Frame-Options 해제
    }
}



spring.datasource.url=jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect



package com.example.myapp.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

@Configuration
@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter {

    @Override
    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
        auth.inMemoryAuthentication()
                .withUser("user").password(passwordEncoder().encode("password")).roles("USER")
                .and()
                .withUser("admin").password(passwordEncoder().encode("admin")).roles("ADMIN");
    }

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http
                .authorizeRequests()
                    .antMatchers("/h2-console/**").permitAll() // H2 콘솔 접근 허용
                    .anyRequest().authenticated() // 기타 모든 요청은 인증 필요
                    .and()
                .formLogin()
                    .loginPage("/login").permitAll() // 로그인 페이지 사용자 정의
                    .and()
                .logout()
                    .permitAll() // 로그아웃 허용
                    .and()
                .csrf()
                    .ignoringAntMatchers("/h2-console/**") // H2 콘솔 경로에 대한 CSRF 보호 해제
                    .and()
                .headers()
                    .frameOptions().disable(); // H2 콘솔의 iframe 접근을 위해 X-Frame-Options 해제
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }
}