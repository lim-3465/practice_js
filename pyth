# 데이터베이스 연결 및 커서 생성
conn = sqlite3.connect('example.db')
c = conn.cursor()

# 테이블 생성: 파일 처리 정보를 저장하는 테이블
c.execute('''CREATE TABLE IF NOT EXISTS file_process_info (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    file_name TEXT,
    status TEXT,
    elapsed_time REAL,
    processed_lines INTEGER
)''')

# 데이터 추출 정보를 저장하는 테이블
c.execute('''CREATE TABLE IF NOT EXISTS extracted_data (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    file_id INTEGER,
    line TEXT,
    extracted_content TEXT,
    FOREIGN KEY(file_id) REFERENCES file_process_info(id)
)''')





folder_path = '/path/to/your/folder'  # 폴더 경로 지정

for filename in os.listdir(folder_path):
    if filename.endswith('.txt'):  # 텍스트 파일인 경우
        file_path = os.path.join(folder_path, filename)
        
        start_time = time.time()  # 처리 시작 시간
        processed_lines = 0  # 처리된 라인 수 초기화
        status = 'Success'  # 기본 상태는 성공으로 가정
        
        try:
            with open(file_path, 'r') as file:
                for line in file:
                    processed_lines += 1
                    # 정규 표현식을 사용하여 데이터 추출 (예: email 추출)
                    match = re.search(r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b', line)
                    if match:
                        extracted_content = match.group(0)
                        # 추출된 데이터를 데이터베이스에 저장
                        c.execute('INSERT INTO extracted_data (file_id, line, extracted_content) VALUES (?, ?, ?)',
                                  (file_id, line, extracted_content))
        
        except Exception as e:
            status = 'Failed'  # 예외 발생 시 실패 상태로 변경
        
        elapsed_time = time.time() - start_time  # 처리 시간 계산
        
        # 파일 처리 정보를 데이터베이스에 저장
        c.execute('INSERT INTO file_process_info (file_name, status, elapsed_time, processed_lines) VALUES (?, ?, ?, ?)',
                  (filename, status, elapsed_time, processed_lines))
        file_id = c.lastrowid  # 방금 삽입된 레코드의 ID

# 변경사항 커밋 및 데이터베이스 연결 종료
conn.commit()
conn.close()
