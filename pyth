import requests
import sqlite3
import json

# API로부터 데이터를 요청하고 JSON으로 받아옵니다.
response = requests.get("여기에_API_주소_입력")
data = response.json()

# SQLite 데이터베이스에 연결하거나, 없으면 새로 생성합니다.
conn = sqlite3.connect('example.db')
c = conn.cursor()

# 데이터베이스 테이블을 생성합니다(이미 존재하지 않는 경우).
# 이 예시에서는 'data' 테이블에 'id'와 'value'라는 두 개의 필드를 생성합니다.
c.execute('''CREATE TABLE IF NOT EXISTS data (id INTEGER PRIMARY KEY, value TEXT)''')

# JSON 데이터에서 정보를 추출하여 데이터베이스에 삽입합니다.
# 이 예시는 JSON 객체의 리스트를 예상하며, 각 객체에 'id'와 'value' 필드가 있다고 가정합니다.
for item in data:
    id = item['id']
    value = json.dumps(item['value'])  # 객체나 배열 등을 문자열로 변환
    c.execute("INSERT INTO data (id, value) VALUES (?, ?)", (id, value))

# 변경사항을 데이터베이스에 커밋합니다.
conn.commit()

# 데이터베이스 연결을 종료합니다.
conn.close()







import requests
import sqlite3
import json

# API 호출
url = 'YOUR_API_ENDPOINT'
response = requests.get(url)
data = response.json()  # 응답을 JSON으로 변환

# SQLite 데이터베이스 연결 (없으면 새로 생성)
conn = sqlite3.connect('example.db')
c = conn.cursor()

# 데이터베이스 테이블 생성
# 예를 들어, data = {"name": "John", "age": 30}이라고 가정
# 테이블 이름은 'users'로 설정
create_table_query = """
CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    {columns}
)
""".format(columns=", ".join([f"{key} TEXT" for key in data.keys()]))
c.execute(create_table_query)

# JSON 데이터 삽입
insert_query = f"""
INSERT INTO users ({', '.join(data.keys())}) 
VALUES ({', '.join(['?' for _ in data.values()])})
"""
c.execute(insert_query, list(data.values()))

# 변경사항 커밋 및 연결 종료
conn.commit()
conn.close()










import sqlite3

# 예시 JSON 데이터 (리스트 내 딕셔너리 형태)
json_data = [
    {"name": "John Doe", "age": 30},
    {"name": "Jane Doe", "age": 25, "email": "jane@example.com"}  # 'email' 키가 추가된 항목
]

# 데이터베이스 연결
conn = sqlite3.connect('example.db')
c = conn.cursor()

# 테이블 생성
c.execute('''
CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT,
    age INTEGER,
    email TEXT
)
''')

# JSON 데이터를 데이터베이스에 삽입
for item in json_data:
    # KeyError 처리를 위한 try-except 블록
    try:
        # 모든 키가 존재하는지 확인하고, 존재하지 않는 경우 기본값 처리
        name = item.get('name', 'Unknown')  # 'name' 키가 없는 경우 'Unknown'을 사용
        age = item.get('age', 0)  # 'age' 키가 없는 경우 0을 사용
        email = item.get('email', '')  # 'email' 키가 없는 경우 빈 문자열을 사용
        
        # 데이터 삽입 쿼리 실행
        c.execute('INSERT INTO users (name, age, email) VALUES (?, ?, ?)', (name, age, email))
    except KeyError as e:
        print(f"Missing key: {e}")

# 변경사항 커밋 및 연결 종료
conn.commit()
conn.close()




