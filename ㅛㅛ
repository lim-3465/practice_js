AG Grid에서 컬럼 사이에 선을 추가하고, 데이터 길이에 맞게 자동으로 열 맞춤을 하려면, 몇 가지 설정을 적용해야 합니다. 아래에서 각각의 요구사항을 해결하는 방법을 설명하겠습니다.

1. 컬럼 사이에 선 추가하기 (Column Separator)

AG Grid에서 컬럼 사이에 구분선을 추가하려면, 그리드에 기본 스타일을 적용하거나 CSS로 직접 스타일링할 수 있습니다.

방법 1: AG Grid 자체 스타일 사용

gridOptions에 있는 rowStyle 또는 **rowClass**를 사용하여 테이블에 스타일을 지정할 수 있습니다. 하지만 이 방식으로는 정확한 컬럼 사이의 선을 설정하기 어렵기 때문에 CSS로 직접 추가하는 것이 가장 일반적인 방법입니다.

방법 2: CSS로 컬럼 사이에 선 추가

AG Grid에서 각 셀에 테두리를 주어 컬럼 사이의 선을 구현할 수 있습니다. ag-theme를 사용하는 동안 cell 클래스에 border-right를 추가해줄 수 있습니다.

/* 스타일로 각 셀 사이에 구분선을 넣음 */
.ag-theme-alpine .ag-cell {
  border-right: 1px solid #ddd; /* 컬럼 사이에 선 */
}

.ag-theme-alpine .ag-header-cell {
  border-right: 1px solid #ddd; /* 헤더에도 동일한 구분선 추가 */
}

이렇게 하면 각 셀과 헤더 사이에 선이 들어가서 컬럼 구분을 쉽게 볼 수 있습니다.

2. 데이터 길이에 맞게 자동 열 맞춤 (Auto Column Resize)

AG Grid에서 열을 데이터 길이에 맞게 자동으로 조정하는 기능은 autoSizeColumns 기능을 사용하여 구현할 수 있습니다. 이 기능을 사용하면, 각 열의 데이터를 기준으로 열의 너비를 자동으로 맞출 수 있습니다.

자동 열 맞춤 설정 방법:

	1.	onFirstDataRendered 이벤트를 사용하여 첫 번째 데이터가 렌더링될 때 자동으로 열 크기를 조정합니다.
	2.	api.sizeColumnsToFit()은 그리드의 전체 너비에 맞게 조정하지만, 각 열에 맞추어 너비를 자동으로 맞추려면 autoSizeColumns() 메서드를 사용합니다.

import React, { useRef } from 'react';
import { AgGridReact } from 'ag-grid-react';
import 'ag-grid-community/styles/ag-grid.css';
import 'ag-grid-community/styles/ag-theme-alpine.css';

const MyGrid = () => {
  const gridRef = useRef(null);

  const columnDefs = [
    { field: 'name' },
    { field: 'age' },
    { field: 'address' },
  ];

  const rowData = [
    { name: 'John Doe', age: 25, address: '1234 Long Street Name' },
    { name: 'Jane Smith', age: 30, address: '5678 Another Long Address' },
    { name: 'Michael Johnson', age: 35, address: 'This is a much longer address than usual' },
  ];

  // 데이터 렌더링 후 자동으로 열 크기 맞추기
  const onFirstDataRendered = (params) => {
    // 특정 열에 맞추기: 모든 열의 너비를 데이터에 맞추어 자동 조정
    const allColumnIds = params.columnApi.getAllColumns().map(col => col.getId());
    params.columnApi.autoSizeColumns(allColumnIds);
  };

  return (
    <div className="ag-theme-alpine" style={{ height: 400, width: '100%' }}>
      <AgGridReact
        ref={gridRef}
        columnDefs={columnDefs}
        rowData={rowData}
        onFirstDataRendered={onFirstDataRendered}  // 첫 데이터 렌더링 후 호출
      />
    </div>
  );
};

export default MyGrid;

설명:

	1.	onFirstDataRendered: 그리드가 처음으로 데이터를 렌더링할 때 호출됩니다. 여기서 autoSizeColumns() 메서드를 사용해 각 열의 크기를 자동으로 조정합니다.
	2.	params.columnApi.getAllColumns(): 그리드에 있는 모든 열의 ID를 가져옵니다.
	3.	autoSizeColumns(): 열의 너비를 데이터의 최대 길이에 맞춰 자동으로 설정해 줍니다.

이 코드를 적용하면 각 열이 해당 열의 데이터 길이에 맞춰 자동으로 크기가 조정됩니다.

3. sizeColumnsToFit() vs autoSizeColumns()

	•	sizeColumnsToFit(): 전체 그리드의 너비에 맞춰 열의 크기를 조정합니다. 즉, 그리드 너비에 맞춰 열이 고르게 분배됩니다.
	•	autoSizeColumns(): 각 열의 데이터 길이에 맞춰 열의 크기를 조정합니다. 열마다 크기가 다르게 설정됩니다.

결론:

	1.	컬럼 사이에 선을 추가하려면 CSS를 사용하여 .ag-cell에 border-right 속성을 추가하면 됩니다.
	2.	데이터 길이에 맞게 열을 자동으로 조정하려면, autoSizeColumns() 메서드를 사용하여 데이터를 렌더링한 후 열의 크기를 자동으로 맞출 수 있습니다.
	3.	onFirstDataRendered 이벤트 핸들러를 사용하여 그리드가 데이터를 렌더링한 후 자동으로 열 크기를 맞추도록 설정할 수 있습니다.

이 방법을 사용하면 AG Grid에서 열 사이에 구분선을 표시하고, 데이터의 길이에 따라 열의 크기가 자동으로 맞춰지도록 할 수 있습니다.











`INSERT INTO ... VALUES` 구문에서 **`UNION ALL`**을 사용하는 방식으로 변경하려면, `VALUES` 부분을 **개별 쿼리**로 나누어 처리하고 이를 **`UNION ALL`**로 연결해야 합니다. 이 방법은 대량 데이터를 한번에 삽입할 때 유용하며, Oracle DB에서 성능을 개선하는데 도움이 될 수 있습니다.

### 1. **Java 코드: 변경 없음**

**Java 코드**는 그대로 유지하면서 **MyBatis XML 파일**에서만 쿼리 부분을 수정합니다. Java 코드에서 **리스트 데이터를 서브리스트로 나누어** `Map`에 담고, MyBatis로 전달하는 부분은 변하지 않습니다.

#### `MyRepository.java`

```java
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

@Repository
public class MyRepository {

    @Autowired
    private MyMapper myMapper;

    public void insertLargeList(List<MyEntity> entityList) {
        int batchSize = 4000;
        int totalSize = entityList.size();

        for (int i = 0; i < totalSize; i += batchSize) {
            // 4000개씩 리스트를 잘라서 subList로 처리
            List<MyEntity> subList = entityList.subList(i, Math.min(i + batchSize, totalSize));

            // Map에 리스트를 넣어 전달
            Map<String, Object> paramMap = new HashMap<>();
            paramMap.put("list", subList);

            // MyBatis Mapper 호출
            myMapper.insertEntities(paramMap);
        }
    }
}
```

### 2. **MyBatis XML 파일 수정**

여기서 **`UNION ALL`**을 사용하여 다수의 `INSERT` 문을 하나의 쿼리로 처리합니다. **리스트 데이터를 반복**하면서 각 데이터를 `INSERT`의 한 부분으로 처리하고, 이를 **`UNION ALL`**로 연결합니다.

#### 예시: **`MyMapper.xml`** (변경된 XML 설정)

```xml
<mapper namespace="com.example.mapper.MyMapper">

    <!-- 사용자 정의 객체 리스트 삽입 (UNION ALL 사용) -->
    <insert id="insertEntities" parameterType="map">
        INSERT ALL
        <foreach collection="list" item="item" index="index" separator=" ">
            INTO my_table (column1, column2, column3)
            VALUES (#{item.field1}, #{item.field2}, #{item.field3})
        </foreach>
        SELECT 1 FROM DUAL
    </insert>

</mapper>
```

### 3. **`UNION ALL` 대신 `INSERT ALL`을 사용한 이유**

- **`INSERT ALL`** 구문은 **Oracle의 배치 처리**에서 사용하는 방식입니다. 
- **`UNION ALL`**과 비슷한 방식으로 여러 `INSERT` 구문을 처리할 수 있습니다.
- **Oracle DB**에서 **`INSERT ALL`**은 **한 번의 쿼리로 여러 행을 삽입**하는 데 사용됩니다.
- 마지막에 `SELECT 1 FROM DUAL`을 추가해야 쿼리가 올바르게 동작합니다.

### 4. **테이블 설정 (Oracle)**

Oracle DB에 맞춰 테이블을 생성합니다. 이 테이블은 **ID 컬럼 없이** 나머지 컬럼만 데이터를 삽입할 수 있도록 설정됩니다.

#### 오라클 DB에서 테이블 생성 예시:

```sql
-- 테이블 생성 (ID 없이)
CREATE TABLE my_table (
    column1 VARCHAR2(100),
    column2 VARCHAR2(100),
    column3 VARCHAR2(100)
);
```

- **`my_table`**: 3개의 컬럼으로 구성된 테이블이며, **ID는 사용하지 않음**.

### 5. **Oracle 설정 (`application.yml` 또는 `application.properties`)**

Oracle DB에 연결하기 위한 설정을 **`application.yml`** 또는 **`application.properties`**에 추가합니다.

#### `application.yml` 예시:

```yaml
spring:
  datasource:
    url: jdbc:oracle:thin:@localhost:1521:xe
    username: your_username
    password: your_password
    driver-class-name: oracle.jdbc.OracleDriver
  jpa:
    hibernate:
      ddl-auto: none
    show-sql: true
```

#### `application.properties` 예시:

```properties
spring.datasource.url=jdbc:oracle:thin:@localhost:1521:xe
spring.datasource.username=your_username
spring.datasource.password=your_password
spring.datasource.driver-class-name=oracle.jdbc.OracleDriver
spring.jpa.hibernate.ddl-auto=none
spring.jpa.show-sql=true
```

### 6. **디버깅 및 테스트**

**리스트 데이터를 제대로 전달**했는지, **사용자 정의 객체의 필드 값이 올바르게 매핑**되었는지 확인하려면, **디버깅**을 통해 `subList`와 `paramMap`의 내용을 확인할 수 있습니다.

#### 디버깅 예시:

```java
public void insertLargeList(List<MyEntity> entityList) {
    int batchSize = 4000;
    int totalSize = entityList.size();

    for (int i = 0; i < totalSize; i += batchSize) {
        List<MyEntity> subList = entityList.subList(i, Math.min(i + batchSize, totalSize));

        Map<String, Object> paramMap = new HashMap<>();
        paramMap.put("list", subList);

        // 디버깅용 로그 출력
        System.out.println("SubList: " + subList);
        System.out.println("ParamMap: " + paramMap);

        // MyBatis Mapper 호출
        myMapper.insertEntities(paramMap);
    }
}
```

### 7. **결론**

1. **Oracle DB의 `INSERT ALL`**을 사용하여 **여러 행을 한 번에 삽입**할 수 있습니다. 이 방식은 성능을 개선할 수 있습니다.
2. **`UNION ALL`**과 유사하게 여러 `INSERT` 구문을 처리하지만, **Oracle에서는 `INSERT ALL`**이 더 적합합니다.
3. 마지막에 **`SELECT 1 FROM DUAL`**을 추가하여 쿼리가 정상적으로 실행되도록 설정해야 합니다.
4. **테스트와 디버깅**을 통해 데이터가 제대로 삽입되는지 확인합니다.