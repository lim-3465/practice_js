import React, { useState } from 'react';
import PivotTableUI from 'react-pivottable/PivotTableUI';
import 'react-pivottable/pivottable.css';

function PivotTableWithData() {
    const [pivotData, setPivotData] = useState([]);
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState('');

    const fetchDataForPivot = async () => {
        setLoading(true);
        setError('');
        try {
            const response = await fetch('https://api.example.com/pivot-data'); // API 엔드포인트를 지정합니다.
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            const data = await response.json();
            setPivotData(data);
        } catch (error) {
            console.error('Fetching data failed:', error);
            setError('Fetching data failed');
        } finally {
            setLoading(false);
        }
    };

    return (
        <div>
            <button onClick={fetchDataForPivot}>Load Pivot Data</button>
            {loading && <div>Loading...</div>}
            {error && <div>Error: {error}</div>}
            {!loading && !error && pivotData.length > 0 && (
                <PivotTableUI
                    data={pivotData}
                    onChange={s => setPivotData(s)}
                    {...pivotData}
                />
            )}
        </div>
    );
}




import React, { useState } from 'react';
import PivotTableUI from 'react-pivottable/PivotTableUI';
import 'react-pivottable/pivottable.css';

function MyPivotTable() {
    const [pivotState, setPivotState] = useState({
        data: [
            {country: 'USA', year: '2012', sport: 'Swimming', gold: 3},
            {country: 'USA', year: '2012', sport: 'Athletics', gold: 1},
            {country: 'USA', year: '2016', sport: 'Swimming', gold: 4},
            {country: 'USA', year: '2016', sport: 'Athletics', gold: 2},
            {country: 'Canada', year: '2012', sport: 'Swimming', gold: 1},
            {country: 'Canada', year: '2016', sport: 'Athletics', gold: 2},
            // 추가 데이터...
        ],
        rows: ['country', 'year', 'sport'], // 로우 그룹화 설정
        cols: [],
        aggregatorName: 'Sum',
        vals: ['gold'],
    });

    return (
        <PivotTableUI
            data={pivotState.data}
            onChange={s => setPivotState(s)}
            {...pivotState}
        />
    );
}




import React, { useState } from 'react';
import PivotTableUI from 'react-pivottable/PivotTableUI';
import 'react-pivottable/pivottable.css';

function MyPivotTable() {
    const [pivotState, setPivotState] = useState({
        data: [
            {country: 'USA', year: '2012', sport: 'Swimming'},
            {country: 'USA', year: '2012', sport: 'Athletics'},
            {country: 'USA', year: '2016', sport: 'Swimming'},
            // 추가 데이터...
        ],
        rows: ['country', 'year'], // 로우 그룹화 설정
        cols: ['sport'], // 컬럼 그룹화 설정
        aggregatorName: 'Count', // 집계 함수로 'Count' 사용
        vals: [], // 'Count' 집계는 특정 필드에 대한 값을 계산하지 않으므로 비워둠
    });

    return (
        <PivotTableUI
            data={pivotState.data}
            onChange={s => setPivotState(s)}
            {...pivotState}
        />
    );
}












import React from 'react';

function MergedCellsTable({ data }) {
  // 데이터 가공 함수 (여기서는 단순화를 위해 생략)

  return (
    <table>
      <thead>
        <tr>
          <th>Name</th>
          <th>Age</th>
          <th>City</th>
        </tr>
      </thead>
      <tbody>
        {data.map((item, index, array) => {
          // 이전 항목과 이름이 같은 경우 렌더링하지 않음
          if (index > 0 && item.name === array[index - 1].name) {
            return null;
          }
          // 이름이 같은 항목의 개수를 계산
          const sameNameCount = array.filter(i => i.name === item.name).length;

          return (
            <tr key={index}>
              {sameNameCount > 1 ? (
                <td rowSpan={sameNameCount}>{item.name}</td>
              ) : (
                <td>{item.name}</td>
              )}
              <td>{item.age}</td>
              <td>{item.city}</td>
            </tr>
          );
        })}
      </tbody>
    </table>
  );
}








import React, { useState } from 'react';

function DynamicTable() {
  const [rows, setRows] = useState([
    { id: 1, name: 'John Doe', age: 30 },
    { id: 2, name: 'Jane Doe', age: 25 },
  ]);

  const addRow = () => {
    const newRow = { id: rows.length + 1, name: 'New User', age: 20 };
    setRows([...rows, newRow]);
  };

  const removeRow = () => {
    if (rows.length > 0) {
      setRows(rows.slice(0, -1));
    }
  };

  return (
    <div>
      <button onClick={addRow}>+</button>
      <button onClick={removeRow}>-</button>
      <table>
        <thead>
          <tr>
            <th>ID</th>
            <th>Name</th>
            <th>Age</th>
          </tr>
        </thead>
        <tbody>
          {rows.map(row => (
            <tr key={row.id}>
              <td>{row.id}</td>
              <td>{row.name}</td>
              <td>{row.age}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}








// FormApp.js
import React from 'react';
import { useRecoilValue } from 'recoil';
import { userRoleState } from './states';
import { useImmer } from 'use-immer';

function FormApp() {
  const userRole = useRecoilValue(userRoleState); // 사용자 권한을 Recoil에서 가져옴
  const [formsData, updateFormsData] = useImmer({
    form1: { name: '', age: '' },
    form2: { email: '', country: '' },
  });

  // ...

  return (
    <div>
      {/* Form 1 */}
      <div>
        {/* Form 1 Inputs */}
      </div>

      {/* Form 2, 조건부로 렌더링 */}
      {userRole === 'admin' && (
        <div>
          {/* Form 2 Inputs */}
        </div>
      )}

      <button onClick={handleSubmit}>Submit</button>
    </div>
  );
}





