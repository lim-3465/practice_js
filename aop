사용자가 컨트롤러를 호출할 때 날짜, 시간, 사용자 ID, 호출한 API 주소 등을 데이터베이스에 기록하려면, AOP(Aspect-Oriented Programming)를 사용하여 모든 API 호출에 대한 로깅을 중앙 집중화할 수 있습니다. 이를 통해 코드 중복을 줄이고, 필요한 모든 정보가 데이터베이스에 기록되도록 할 수 있습니다.

### 1. 데이터베이스 테이블 설계

먼저, 로그를 기록할 데이터베이스 테이블을 설계해야 합니다. 예를 들어, 다음과 같은 테이블을 생성할 수 있습니다.

#### SQL 스크립트

```sql
CREATE TABLE api_call_logs (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    user_id VARCHAR(255),
    api_url VARCHAR(255),
    http_method VARCHAR(10),
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    request_data TEXT
);
```

이 테이블은 API 호출의 ID, 사용자 ID, 호출한 API의 URL, HTTP 메서드, 호출 시간, 그리고 요청 데이터를 저장합니다.

### 2. AOP를 사용한 로깅 구현

이제 Spring AOP를 사용하여 모든 컨트롤러 호출을 가로채고, 필요한 정보를 데이터베이스에 기록하는 로직을 작성하겠습니다.

#### 2.1. 로깅 서비스 작성

먼저, API 호출 정보를 데이터베이스에 저장하는 `LoggingService`를 작성합니다.

```java
import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;

@Service
public class LoggingService {

    private final ApiCallLogRepository apiCallLogRepository;

    @Autowired
    public LoggingService(ApiCallLogRepository apiCallLogRepository) {
        this.apiCallLogRepository = apiCallLogRepository;
    }

    public void logApiCall(String userId, String apiUrl, String httpMethod, String requestData) {
        ApiCallLog log = new ApiCallLog(userId, apiUrl, httpMethod, requestData);
        apiCallLogRepository.save(log);
    }
}
```

#### 2.2. AOP 애스펙트 작성

이제 AOP를 사용하여 모든 컨트롤러 호출을 가로채는 `LoggingAspect`를 작성합니다.

```java
import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.annotation.AfterReturning;
import org.aspectj.lang.annotation.Aspect;
import org.springframework.stereotype.Component;
import javax.servlet.http.HttpServletRequest;
import org.aspectj.lang.annotation.Before;
import org.aspectj.lang.annotation.Pointcut;

@Component
@Aspect
public class LoggingAspect {

    private final LoggingService loggingService;
    private final HttpServletRequest request;

    public LoggingAspect(LoggingService loggingService, HttpServletRequest request) {
        this.loggingService = loggingService;
        this.request = request;
    }

    @Pointcut("within(@org.springframework.web.bind.annotation.RestController *)")
    public void controllerMethods() {}

    @AfterReturning("controllerMethods()")
    public void logAfter(JoinPoint joinPoint) {
        String userId = request.getHeader("User-ID");  // 헤더에서 사용자 ID 추출, 다른 방법으로도 가져올 수 있음
        String apiUrl = request.getRequestURI();  // 호출된 API URL
        String httpMethod = request.getMethod();  // HTTP 메서드(GET, POST 등)
        String requestData = request.getQueryString();  // 요청 파라미터들

        loggingService.logApiCall(userId, apiUrl, httpMethod, requestData);
    }
}
```

위 코드에서:

- `@Pointcut("within(@org.springframework.web.bind.annotation.RestController *)")`: 모든 `@RestController` 클래스에 정의된 메서드들이 이 포인트컷에 포함됩니다.
- `@AfterReturning("controllerMethods()")`: 컨트롤러 메서드가 정상적으로 실행된 후에 로깅이 수행됩니다.
- `HttpServletRequest`: Spring이 제공하는 HTTP 요청 객체로, 이를 통해 API URL, HTTP 메서드, 요청 데이터 등을 추출할 수 있습니다.
- `logApiCall`: `LoggingService`를 사용해 로그를 데이터베이스에 저장합니다.

#### 2.3. API 호출 로그 엔티티 및 레포지토리 작성

로그 데이터를 저장할 엔티티와 레포지토리를 작성합니다.

##### 엔티티 클래스

```java
import javax.persistence.*;

@Entity
public class ApiCallLog {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String userId;
    private String apiUrl;
    private String httpMethod;
    private String requestData;

    @Column(nullable = false, updatable = false)
    private Timestamp timestamp;

    public ApiCallLog(String userId, String apiUrl, String httpMethod, String requestData) {
        this.userId = userId;
        this.apiUrl = apiUrl;
        this.httpMethod = httpMethod;
        this.requestData = requestData;
        this.timestamp = new Timestamp(System.currentTimeMillis());
    }

    // 기본 생성자, 게터 및 세터 생략
}
```

##### 레포지토리 인터페이스

```java
import org.springframework.data.jpa.repository.JpaRepository;

public interface ApiCallLogRepository extends JpaRepository<ApiCallLog, Long> {
}
```

### 3. 전체 흐름 요약

1. **사용자가 API 호출**: 사용자가 컨트롤러에 정의된 API를 호출합니다.
2. **AOP 애스펙트가 호출을 가로챔**: AOP가 이 호출을 가로채어 필요한 정보를 추출합니다.
3. **로그 저장**: `LoggingService`를 통해 추출한 정보를 데이터베이스에 저장합니다.
4. **컨트롤러 정상 실행**: AOP 애스펙트가 실행된 후, 컨트롤러 로직이 정상적으로 실행됩니다.

### 결론

이 방식으로, 사용자가 API를 호출할 때마다 관련 정보를 자동으로 데이터베이스에 기록할 수 있습니다. AOP를 사용하면 이러한 로깅 로직을 개별 컨트롤러 메서드에 반복적으로 작성할 필요가 없으므로 코드의 간결성과 유지보수성을 높일 수 있습니다. 또한, 로깅 이외의 횡단 관심사에도 AOP를 적용할 수 있습니다.