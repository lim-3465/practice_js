롤(Role)별로 메뉴나 화면을 컨트롤하려면 액세스 토큰에 포함된 롤 정보를 확인하고 이를 기반으로 UI 요소를 조건부 렌더링하는 방법이 효과적입니다. 액세스 토큰에 롤 정보가 포함되어 있다면, 다음과 같은 방식으로 사용자의 권한을 확인하고 UI를 제어할 수 있습니다.

1. 액세스 토큰에서 롤 정보 파싱하기

먼저, **액세스 토큰에 포함된 클레임(claim)**에서 롤 정보를 확인해야 합니다. 보통 JWT(Json Web Token) 기반의 액세스 토큰을 사용하며, 토큰에는 roles 또는 scope와 같은 클레임이 롤 정보를 담고 있습니다.

예: 액세스 토큰에서 롤 정보 추출

액세스 토큰을 디코딩하여 특정 클레임에 접근할 수 있습니다. 아래 예제는 JWT 라이브러리를 사용해 토큰을 디코딩하고, 사용자의 롤 정보를 추출하는 방법입니다.

import jwtDecode from "jwt-decode";

// JWT 토큰을 디코딩하고 roles 클레임을 추출
function getRolesFromToken(token) {
  try {
    const decoded = jwtDecode(token);
    return decoded.roles || [];  // 토큰에서 roles 클레임을 추출
  } catch (error) {
    console.error("Invalid token:", error);
    return [];
  }
}

2. 롤 정보에 따라 UI 조건부 렌더링

리액트 컴포넌트에서 롤에 따라 메뉴나 화면을 조건부 렌더링하여 접근을 제어합니다. 예를 들어, 사용자의 롤이 admin일 때만 특정 메뉴를 표시하거나, 특정 페이지에 접근하도록 설정할 수 있습니다.

import React from "react";

function MyComponent({ token }) {
  const roles = getRolesFromToken(token);

  return (
    <div>
      <h1>Welcome</h1>

      {/* 'admin' 롤이 있을 경우, 관리자 메뉴를 표시 */}
      {roles.includes("admin") && (
        <div>
          <h2>Admin Menu</h2>
          <ul>
            <li>Manage Users</li>
            <li>System Settings</li>
          </ul>
        </div>
      )}

      {/* 'user' 롤이 있을 경우, 사용자 메뉴를 표시 */}
      {roles.includes("user") && (
        <div>
          <h2>User Menu</h2>
          <ul>
            <li>My Profile</li>
            <li>My Orders</li>
          </ul>
        </div>
      )}
    </div>
  );
}

export default MyComponent;

3. 전체 화면 접근 제어

React Router와 같은 라우팅 라이브러리를 사용하여 페이지 단위로 접근을 제어할 수도 있습니다. 특정 페이지나 화면이 특정 롤에만 허용되도록 설정할 수 있습니다.

import React from "react";
import { BrowserRouter as Router, Route, Redirect } from "react-router-dom";

// ProtectedRoute 컴포넌트: 특정 롤이 없으면 접근을 차단
function ProtectedRoute({ roles, token, children, ...rest }) {
  const userRoles = getRolesFromToken(token);
  const hasAccess = roles.some(role => userRoles.includes(role));

  return (
    <Route
      {...rest}
      render={() => (hasAccess ? children : <Redirect to="/no-access" />)}
    />
  );
}

function App() {
  const token = localStorage.getItem("access_token"); // 토큰을 가져옴

  return (
    <Router>
      <Route exact path="/" component={Home} />

      {/* admin 롤이 필요 */}
      <ProtectedRoute path="/admin" roles={["admin"]} token={token}>
        <AdminPage />
      </ProtectedRoute>

      {/* user 롤이 필요 */}
      <ProtectedRoute path="/profile" roles={["user"]} token={token}>
        <ProfilePage />
      </ProtectedRoute>
    </Router>
  );
}

export default App;

4. 서버 측 검증 (백엔드와 연동 시)

	•	백엔드에서 권한 확인: 클라이언트에서 화면을 제어하는 것 외에도, 백엔드에서 요청마다 롤을 확인해 적절한 권한이 있는지 검증하는 것이 중요합니다.
	•	Spring Security 설정: 백엔드(Spring Boot)에서 Spring Security와 JWT를 사용하여 API 접근 시 토큰의 롤을 검증할 수 있습니다.

import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;

@Configuration
@EnableGlobalMethodSecurity(prePostEnabled = true)
public class SecurityConfig extends WebSecurityConfigurerAdapter {
    // Spring Security 설정
}

// API 엔드포인트에서 롤별 접근 제어
@RestController
public class AdminController {

    @GetMapping("/admin")
    @PreAuthorize("hasRole('ROLE_ADMIN')")
    public String adminOnlyEndpoint() {
        return "Hello Admin!";
    }
}

요약

	1.	토큰에서 롤 정보 추출: jwtDecode 라이브러리 등을 이용해 액세스 토큰을 디코딩하고 롤 정보를 추출합니다.
	2.	롤에 따라 조건부 렌더링: UI 요소(메뉴, 페이지)를 롤에 따라 조건부 렌더링하여 필요한 경우에만 표시합니다.
	3.	페이지 접근 제한: React Router와 ProtectedRoute를 사용해 특정 롤이 없는 경우 페이지 접근을 제한합니다.
	4.	백엔드와의 통합: 백엔드(Spring Boot)에서 Spring Security와 JWT를 사용해 API 요청을 보호하고, 롤을 확인해 서버 측에서 권한을 검증합니다.

이렇게 하면 프론트엔드와 백엔드에서 사용자 롤에 따라 안전하게 접근 권한을 제어할 수 있습니다.



Spring Boot 애플리케이션에 SSL/TLS 인증서를 적용하여 HTTPS를 지원하는 방법을 설명하겠습니다. SSL/TLS를 적용하면 애플리케이션과 클라이언트 간의 통신이 암호화되어, 전송되는 데이터의 보안을 강화할 수 있습니다.

### 1. SSL/TLS 인증서 준비

먼저 SSL/TLS 인증서를 준비해야 합니다. 인증서는 다음 중 하나일 수 있습니다:

- **공인 인증서**: 인증 기관(CA)에서 발급받은 인증서입니다.
- **자체 서명 인증서**: 개발 및 테스트용으로 자체 서명한 인증서입니다.

여기서는 자체 서명 인증서를 생성하고 이를 Spring Boot 애플리케이션에 적용하는 방법을 설명하겠습니다.

#### 1.1. 자체 서명 인증서 생성

자체 서명 인증서를 생성하기 위해 `keytool` 명령어를 사용할 수 있습니다. `keytool`은 Java Development Kit (JDK)에 포함된 도구로, 키스토어(keystore)와 인증서를 관리할 수 있습니다.

```bash
keytool -genkeypair -alias mycert -keyalg RSA -keysize 2048 -validity 365 -keystore keystore.p12 -storetype PKCS12 -dname "CN=MyApp, OU=MyUnit, O=MyOrg, L=MyCity, ST=MyState, C=MyCountry" -storepass changeit -keypass changeit
```

위 명령어는 다음을 수행합니다:

- `-alias mycert`: 인증서의 별칭(alias)을 `mycert`로 설정합니다.
- `-keyalg RSA`: RSA 알고리즘을 사용합니다.
- `-keysize 2048`: 키 크기를 2048비트로 설정합니다.
- `-validity 365`: 인증서의 유효기간을 365일로 설정합니다.
- `-keystore keystore.p12`: `keystore.p12` 파일에 키스토어를 저장합니다.
- `-storetype PKCS12`: PKCS#12 형식으로 키스토어를 생성합니다.
- `-dname`: 인증서의 주체 정보(CN, OU, O 등)를 설정합니다.
- `-storepass changeit`: 키스토어 암호를 `changeit`으로 설정합니다.
- `-keypass changeit`: 개인 키 암호를 `changeit`으로 설정합니다.

생성된 `keystore.p12` 파일은 이후 Spring Boot 애플리케이션에서 사용됩니다.

### 2. Spring Boot에 SSL/TLS 적용

#### 2.1. `application.properties` 또는 `application.yml` 설정

Spring Boot에서 SSL을 적용하려면 `application.properties` 또는 `application.yml` 파일에 SSL 설정을 추가해야 합니다.

##### `application.properties` 파일 설정

```properties
server.port=8443
server.ssl.key-store=classpath:keystore.p12
server.ssl.key-store-password=changeit
server.ssl.key-store-type=PKCS12
server.ssl.key-alias=mycert
```

##### `application.yml` 파일 설정

```yaml
server:
  port: 8443
  ssl:
    key-store: classpath:keystore.p12
    key-store-password: changeit
    key-store-type: PKCS12
    key-alias: mycert
```

위 설정에서:

- `server.port=8443`: 애플리케이션이 HTTPS를 사용하여 8443 포트에서 실행됩니다.
- `server.ssl.key-store`: 인증서가 포함된 키스토어의 경로를 지정합니다. (여기서는 `classpath:keystore.p12`)
- `server.ssl.key-store-password`: 키스토어 암호를 설정합니다.
- `server.ssl.key-store-type`: 키스토어 형식을 지정합니다. (여기서는 `PKCS12`)
- `server.ssl.key-alias`: 사용할 인증서의 별칭(alias)을 지정합니다.

#### 2.2. 키스토어 파일 위치

`application.properties` 또는 `application.yml`에서 키스토어 파일 경로를 지정할 때, 키스토어 파일이 클래스패스(classpath)에 있으면 `classpath:` 접두사를 사용할 수 있습니다. 만약 파일 시스템의 특정 경로에 있는 경우, 절대 경로를 사용하여 파일을 참조할 수 있습니다.

예를 들어:

- 클래스패스에 위치: `classpath:keystore.p12`
- 파일 시스템의 절대 경로: `/path/to/keystore.p12`

키스토어 파일을 `src/main/resources` 디렉토리에 복사하여 클래스패스에 포함시킬 수 있습니다.

### 3. HTTP와 HTTPS 모두 지원

Spring Boot 애플리케이션이 HTTP와 HTTPS를 모두 지원하도록 구성할 수도 있습니다. 이를 위해 HTTP 포트에서 HTTPS로 리디렉션하는 구성을 추가해야 합니다.

#### 3.1. HTTP에서 HTTPS로 리디렉션

```java
import org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory;
import org.springframework.boot.web.servlet.server.ServletWebServerFactory;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class WebServerConfig {

    @Bean
    public ServletWebServerFactory servletContainer() {
        TomcatServletWebServerFactory tomcat = new TomcatServletWebServerFactory() {
            @Override
            protected void postProcessContext(org.apache.catalina.Context context) {
                org.apache.catalina.connector.Connector connector = new org.apache.catalina.connector.Connector(TomcatServletWebServerFactory.DEFAULT_PROTOCOL);
                connector.setScheme("http");
                connector.setPort(8080);
                connector.setSecure(false);
                connector.setRedirectPort(8443);
                addAdditionalTomcatConnectors(connector);
            }
        };
        return tomcat;
    }
}
```

이 설정을 추가하면 HTTP 포트 8080에서 요청을 수신하고, 이를 HTTPS 포트 8443으로 리디렉션합니다.

### 4. 공인 인증서 적용

실제 프로덕션 환경에서는 공인된 인증 기관(CA)에서 발급한 인증서를 사용해야 합니다. 공인 인증서를 적용하는 방법은 자체 서명 인증서를 적용하는 것과 유사하며, 인증서와 개인 키를 포함한 키스토어 파일을 CA로부터 제공받아 `application.properties` 또는 `application.yml`에 설정하면 됩니다.

### 5. 테스트 및 확인

설정을 완료한 후, 애플리케이션을 실행하고 브라우저에서 `https://localhost:8443`로 접속하여 SSL/TLS가 제대로 적용되었는지 확인합니다. 브라우저에 보안 경고가 나타날 수 있는데, 이는 자체 서명 인증서를 사용했기 때문입니다. 공인 인증서를 사용하면 이러한 경고가 나타나지 않습니다.

### 결론

Spring Boot 애플리케이션에 SSL/TLS 인증서를 적용하면 HTTPS를 통해 클라이언트와의 통신을 암호화할 수 있습니다. 자체 서명 인증서를 사용하여 개발 환경에서 SSL을 설정하는 방법을 설명했으며, 프로덕션 환경에서는 공인된 인증 기관에서 발급한 인증서를 사용하는 것이 좋습니다. 이를 통해 애플리케이션의 보안을 강화하고, 안전한 데이터 전송을 보장할 수 있습니다.