import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class HashMapListExample {
    public static void main(String[] args) {
        // HashMap 객체들을 저장할 ArrayList 생성
        List<Map<String, Object>> hashMapList = new ArrayList<>();

        // 예제 데이터 (이 부분은 실제 사용 사례에 따라 달라질 수 있음)
        String[] names = {"Alice", "Bob", "Charlie"};
        int[] ages = {25, 30, 35};

        // for문을 사용하여 각 HashMap을 생성하고 리스트에 추가
        for (int i = 0; i < names.length; i++) {
            Map<String, Object> personMap = new HashMap<>();
            personMap.put("name", names[i]);
            personMap.put("age", ages[i]);

            // 생성된 HashMap을 리스트에 추가
            hashMapList.add(personMap);
        }

        // 리스트와 그 내용 출력
        System.out.println(hashMapList);
        for (Map<String, Object> person : hashMapList) {
            System.out.println("Name: " + person.get("name") + ", Age: " + person.get("age"));
        }
    }
}









import React, { useState } from 'react';

const FileDropComponent = ({ register }) => {
    const [isDragging, setIsDragging] = useState(false);
    const [file, setFile] = useState(null);

    const handleDragEnter = (e) => {
        e.preventDefault();
        e.stopPropagation();
        setIsDragging(true);
    };

    const handleDragLeave = (e) => {
        e.preventDefault();
        e.stopPropagation();
        setIsDragging(false);
    };

    const handleDragOver = (e) => {
        e.preventDefault();
        e.stopPropagation();
    };

    const handleDrop = (e) => {
        e.preventDefault();
        e.stopPropagation();
        setIsDragging(false);

        const droppedFiles = Array.from(e.dataTransfer.files);
        const acceptedTypes = ['application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'text/csv'];

        if (droppedFiles.length > 1) {
            alert('Only one file is allowed.');
            return;
        }

        const file = droppedFiles.find(file => acceptedTypes.includes(file.type));

        if (file) {
            setFile(file);
            handleFileUpload(file);
        } else {
            alert('Only .xls, .xlsx, .csv files are accepted.');
        }
    };

    const handleFileUpload = async (file) => {
        const formData = new FormData();
        formData.append('file', file);

        try {
            const response = await fetch('/api/upload', {
                method: 'POST',
                body: formData,
            });

            if (response.ok) {
                const result = await response.json();
                console.log('File uploaded successfully:', result);
            } else {
                console.error('File upload failed');
            }
        } catch (error) {
            console.error('Error uploading file:', error);
        }
    };

    const handleFileChange = (e) => {
        const file = e.target.files[0];
        const acceptedTypes = ['application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'text/csv'];
        if (file && acceptedTypes.includes(file.type)) {
            setFile(file);
            handleFileUpload(file);
        } else {
            alert('Only .xls, .xlsx, .csv files are accepted.');
        }
    };

    return (
        <div
            onDragEnter={handleDragEnter}
            onDragLeave={handleDragLeave}
            onDragOver={handleDragOver}
            onDrop={handleDrop}
            style={{
                border: '2px dashed #cccccc',
                borderRadius: '4px',
                padding: '20px',
                textAlign: 'center',
                backgroundColor: isDragging ? '#e9e9e9' : '#ffffff',
                cursor: 'pointer'
            }}
        >
            <input
                type="file"
                style={{ display: 'none' }}
                {...register('file', {
                    required: 'A file is required'
                })}
                onChange={handleFileChange}
            />
            <p>{isDragging ? 'Drop the file here...' : 'Drag & drop a file here, or click to select a file'}</p>
            {file && <p>Selected file: {file.name}</p>}
        </div>
    );
};

export default FileDropComponent;