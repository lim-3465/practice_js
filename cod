public class LibraryWrapper {

    // 스레드별로 독립적인 상태를 유지하기 위해 ThreadLocal 사용
    private static final ThreadLocal<LibraryWrapper> threadLocalWrapper =
        ThreadLocal.withInitial(LibraryWrapper::new);

    // 라이브러리 싱글톤 인스턴스
    private final LibrarySingleton libraryInstance;

    // 각 스레드별 독립적인 상태
    private String customState;

    private LibraryWrapper() {
        this.libraryInstance = LibrarySingleton.getInstance(); // 싱글톤 인스턴스 참조
        this.customState = "default"; // 초기 상태 설정
    }

    public static LibraryWrapper getInstance() {
        return threadLocalWrapper.get();
    }

    // 스레드별로 독립적인 상태를 설정하는 메서드
    public void setCustomState(String state) {
        this.customState = state;
    }

    // 스레드별로 독립적인 상태를 사용하는 메서드
    public void performActionWithState() {
        System.out.println("Custom State: " + customState);
        libraryInstance.performAction();
    }
}





현재 제공된 코드는 엑세스 토큰을 발급받고, 해당 토큰을 API 요청에 사용하는 구조로 되어 있지만, 토큰이 한 시간 동안 유지되도록 관리하거나 만료 시 자동으로 갱신하는 기능은 포함되어 있지 않습니다. 만약 엑세스 토큰이 한 시간 후 만료되는 구조라면, 토큰의 만료 시간을 확인하고, 만료되었을 때 다시 발급받는 로직이 필요합니다.

이를 위해 토큰을 캐시하여 한 시간 동안 재사용하고, 만료 시간이 지나면 토큰을 자동으로 갱신하는 방식으로 구현할 수 있습니다.

1. 토큰 캐싱 및 만료 관리 로직 추가

TokenService에서 토큰 발급 후, 유효 시간(1시간) 동안 캐싱하고, 토큰이 만료되었을 때만 다시 요청하여 토큰을 발급받도록 변경합니다.

수정된 CachedTokenService:

import org.springframework.stereotype.Service;

import java.time.Instant;

@Service
public class CachedTokenService {

    private final TokenService tokenService;

    // 토큰 및 만료 시간 관리
    private String cachedToken;
    private Instant tokenExpiryTime;

    public CachedTokenService(TokenService tokenService) {
        this.tokenService = tokenService;
    }

    // 토큰을 가져오며, 만료된 경우 새로운 토큰 발급
    public String getAccessToken(String clientId, String clientSecret, String tokenUrl) {
        // 토큰이 없거나 만료되었으면 새로 발급
        if (cachedToken == null || Instant.now().isAfter(tokenExpiryTime)) {
            cachedToken = tokenService.fetchAccessToken(clientId, clientSecret, tokenUrl);
            // 토큰 발급 후 1시간 뒤에 만료 설정
            tokenExpiryTime = Instant.now().plusSeconds(3600);  // 1시간 = 3600초
        }
        return cachedToken;
    }
}

2. RestTemplateConfig에서 캐싱된 토큰 사용

RestTemplateConfig는 CachedTokenService를 사용하여 캐싱된 토큰을 가져오고, 토큰이 만료되었을 경우 새로운 토큰을 발급받아 RestTemplate을 리턴하는 방식으로 변경합니다.

수정된 RestTemplateConfig:

import org.springframework.boot.web.client.RestTemplateBuilder;
import org.springframework.context.annotation.Bean;
import org.springframework.http.HttpHeaders;
import org.springframework.http.client.ClientHttpRequestInterceptor;
import org.springframework.stereotype.Component;
import org.springframework.web.client.RestTemplate;

@Component
public class RestTemplateConfig {

    private final CachedTokenService cachedTokenService;

    public RestTemplateConfig(CachedTokenService cachedTokenService) {
        this.cachedTokenService = cachedTokenService;
    }

    // 동적으로 clientId, tokenUrl에 맞는 RestTemplate 리턴
    public RestTemplate createRestTemplate(String clientId, String clientSecret, String tokenUrl) {
        String accessToken = cachedTokenService.getAccessToken(clientId, clientSecret, tokenUrl);  // 캐싱된 토큰 사용

        // 토큰을 포함하는 인터셉터 설정
        ClientHttpRequestInterceptor interceptor = (request, body, execution) -> {
            request.getHeaders().add(HttpHeaders.AUTHORIZATION, "Bearer " + accessToken);  // 토큰 추가
            return execution.execute(request, body);
        };

        // RestTemplateBuilder로 설정된 RestTemplate 반환
        return new RestTemplateBuilder()
                .additionalInterceptors(interceptor)
                .build();
    }
}

3. 서비스에서 캐싱된 토큰을 이용한 API 호출

이제 API 호출 시 RestTemplateConfig에서 캐싱된 토큰을 사용하여 요청을 보냅니다. 요청 시 토큰이 만료되었으면 자동으로 갱신되어 새로운 토큰을 사용합니다.

수정된 ApiService:

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

@Service
public class ApiService {

    private final RestTemplateConfig restTemplateConfig;

    @Autowired
    public ApiService(RestTemplateConfig restTemplateConfig) {
        this.restTemplateConfig = restTemplateConfig;
    }

    public String callExternalApi(String clientId, String clientSecret, String tokenUrl, String apiUrl) {
        // 캐싱된 토큰을 사용하는 RestTemplate 생성
        RestTemplate restTemplate = restTemplateConfig.createRestTemplate(clientId, clientSecret, tokenUrl);

        // GET 요청을 보내고, 응답 받기
        ResponseEntity<String> response = restTemplate.getForEntity(apiUrl, String.class);

        if (response.getStatusCode().is2xxSuccessful()) {
            return response.getBody();  // 성공하면 응답 본문 반환
        } else {
            return "Failed with status: " + response.getStatusCode();
        }
    }
}

4. 동작 흐름

	1.	CachedTokenService:
	•	엑세스 토큰이 발급되면, 해당 토큰은 1시간 동안 캐시됩니다.
	•	1시간이 지나면 토큰이 만료되고, 새로운 토큰을 발급받습니다.
	2.	RestTemplateConfig:
	•	RestTemplate을 생성할 때 CachedTokenService에서 캐싱된 토큰을 가져와 Authorization 헤더에 추가합니다.
	3.	ApiService:
	•	RestTemplateConfig에서 토큰이 포함된 RestTemplate을 가져와 API 요청을 처리합니다.

결론:

	•	이 구조에서는 엑세스 토큰이 1시간 동안 유지됩니다.
	•	토큰이 만료되면 자동으로 새로운 토큰을 발급받아 API 요청에 사용합니다.
	•	이렇게 하면 1시간 이내에는 발급받은 토큰을 계속 사용하고, 그 이후에는 자동으로 갱신된 토큰을 사용하게 됩니다.

이를 통해 엑세스 토큰을 효율적으로 관리할 수 있으며, 매번 API 요청 시마다 새로운 토큰을 발급받을 필요 없이 캐싱된 토큰을 사용할 수 있습니다.







현재 제공된 코드는 한 시간 반(90분)이 지나면 새로운 엑세스 토큰을 자동으로 받아오도록 설계되어 있습니다. 그러나 에러가 발생했을 때도 토큰을 갱신할 수 있도록 추가적인 로직을 구현하는 것이 필요합니다. 일반적으로 API 서버에서 엑세스 토큰 만료 시 “401 Unauthorized”와 같은 상태 코드가 반환될 수 있습니다. 이 경우에 토큰을 재발급하고, 다시 요청을 시도하는 로직을 추가할 수 있습니다.

import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.http.ResponseEntity;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;

@Service
public class TokenService {
    
    private static final String TOKEN_URL = "https://thirdparty.com/oauth/token";

    // 엑세스 토큰을 받아오는 메소드
    public String fetchAccessToken() {
        RestTemplate restTemplate = new RestTemplate();

        // 폼 데이터 설정
        MultiValueMap<String, String> requestData = new LinkedMultiValueMap<>();
        requestData.add("grant_type", "client_credentials");
        requestData.add("client_id", "your_client_id");
        requestData.add("client_secret", "your_client_secret");

        // POST 요청으로 토큰 가져오기
        ResponseEntity<TokenResponse> response = restTemplate.postForEntity(TOKEN_URL, requestData, TokenResponse.class);
        
        return response.getBody().getAccessToken(); // 토큰을 반환
    }

    // 응답 데이터를 담을 클래스
    public static class TokenResponse {
        private String access_token;

        public String getAccessToken() {
            return access_token;
        }

        public void setAccessToken(String access_token) {
            this.access_token = access_token;
        }
    }
}









이를 위해 RestTemplate에 재시도 로직을 추가하고, 401 상태 코드가 발생했을 때 엑세스 토큰을 갱신하는 방식을 적용할 수 있습니다.

수정된 로직 (401 에러 시 토큰 갱신 및 재시도)

	1.	토큰 갱신 인터셉터 작성:
	•	요청이 실패하고 401 에러가 발생하면 토큰을 새로 받아오고, 다시 요청을 시도하는 로직을 구현합니다.
	2.	RestTemplateBuilder에 인터셉터 적용**:
	•	ClientHttpRequestInterceptor를 사용하여 재시도 로직을 추가합니다.

구현 코드:

import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpRequest;
import org.springframework.http.client.ClientHttpRequestExecution;
import org.springframework.http.client.ClientHttpRequestInterceptor;
import org.springframework.http.client.ClientHttpResponse;
import org.springframework.stereotype.Component;
import org.springframework.web.client.RestTemplate;

import java.io.IOException;

@Component
public class RetryableTokenInterceptor implements ClientHttpRequestInterceptor {

    private final CachedTokenService cachedTokenService;

    public RetryableTokenInterceptor(CachedTokenService cachedTokenService) {
        this.cachedTokenService = cachedTokenService;
    }

    @Override
    public ClientHttpResponse intercept(HttpRequest request, byte[] body, ClientHttpRequestExecution execution) throws IOException {
        // 엑세스 토큰을 헤더에 추가
        String accessToken = cachedTokenService.getAccessToken();
        request.getHeaders().add("Authorization", "Bearer " + accessToken);

        // 요청을 실행
        ClientHttpResponse response = execution.execute(request, body);

        // 401 상태 코드인 경우 토큰 갱신 및 재시도 로직
        if (response.getStatusCode().value() == 401) {
            // 새로운 토큰 요청
            String newAccessToken = cachedTokenService.getAccessToken(true); // 강제로 토큰 갱신

            // 기존 요청에 새로운 토큰을 추가하여 다시 실행
            request.getHeaders().remove("Authorization");
            request.getHeaders().add("Authorization", "Bearer " + newAccessToken);

            // 재시도
            response = execution.execute(request, body);
        }

        return response;
    }
}

수정된 CachedTokenService 클래스 (강제 토큰 갱신 로직 포함)

import org.springframework.stereotype.Service;

import java.time.Instant;

@Service
public class CachedTokenService {

    private final TokenService tokenService;

    private Instant tokenExpiryTime;
    private String cachedToken;

    public CachedTokenService(TokenService tokenService) {
        this.tokenService = tokenService;
    }

    // 토큰 만료 시간 확인 및 갱신 (forceRenew = true면 강제 갱신)
    public String getAccessToken() {
        return getAccessToken(false);
    }

    public String getAccessToken(boolean forceRenew) {
        if (forceRenew || cachedToken == null || Instant.now().isAfter(tokenExpiryTime)) {
            cachedToken = tokenService.fetchAccessToken();
            // 토큰 발급 후 90분 동안 유효
            tokenExpiryTime = Instant.now().plusSeconds(90 * 60);
        }
        return cachedToken;
    }
}

RestTemplate 설정에 인터셉터 추가

import org.springframework.boot.web.client.RestTemplateBuilder;
import org.springframework.context.annotation.Bean;
import org.springframework.stereotype.Component;
import org.springframework.web.client.RestTemplate;

import java.time.Duration;

@Component
public class RestTemplateConfig {

    private final RetryableTokenInterceptor retryableTokenInterceptor;

    public RestTemplateConfig(RetryableTokenInterceptor retryableTokenInterceptor) {
        this.retryableTokenInterceptor = retryableTokenInterceptor;
    }

    @Bean
    public RestTemplate restTemplate(RestTemplateBuilder builder) {
        return builder
                .setConnectTimeout(Duration.ofSeconds(30))
                .setReadTimeout(Duration.ofSeconds(30))
                .additionalInterceptors(retryableTokenInterceptor)
                .build();
    }
}

설명:

	1.	RetryableTokenInterceptor: 이 인터셉터는 HTTP 요청을 보내기 전 Authorization 헤더에 엑세스 토큰을 추가하고, 서버 응답이 401 (Unauthorized) 일 경우 엑세스 토큰을 새로 발급받아 요청을 재시도하는 로직을 포함합니다.
	•	토큰 갱신 및 재시도: 요청이 401 오류를 반환하면, 새로운 토큰을 발급받고 원래 요청을 재시도합니다.
	2.	CachedTokenService:
	•	기본적으로 90분 동안 캐시된 토큰을 반환하지만, forceRenew 플래그가 true로 설정되면 강제로 새로운 토큰을 발급받습니다.
	3.	RestTemplateConfig:
	•	RestTemplate에 인터셉터를 추가하여 모든 요청이 이 인터셉터를 거치도록 설정합니다.

전체 흐름:

	1.	정상적인 요청: 엑세스 토큰이 유효한 동안에는 캐싱된 토큰을 사용하여 요청을 보냅니다.
	2.	401 오류 발생 시: 엑세스 토큰이 만료되었거나 유효하지 않은 경우, 401 상태 코드를 감지하여 새로운 토큰을 발급받고, 동일한 요청을 다시 시도합니다.
	3.	강제 토큰 갱신: CachedTokenService는 기본적으로 캐시된 토큰을 반환하지만, 401 오류가 발생하면 강제로 토큰을 갱신합니다.

이렇게 구현하면 한 시간 반 동안 유효한 토큰을 사용하며, 토큰이 만료되거나 401 오류가 발생할 때마다 새로운 토큰을 받아 다시 요청을 시도할 수 있습니다.