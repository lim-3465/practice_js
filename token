Spring Boot 백엔드와 React 프론트엔드를 사용하는 애플리케이션에서, Spring Security를 활용한 폼 로그인과 SSO 로그인을 구현하는 방법을 설명합니다. 

Spring Boot는 백엔드에서 인증 및 권한 부여를 처리하고, React는 프론트엔드에서 사용자 인터페이스를 제공합니다. 이 경우, Spring Security는 REST API를 보호하고, React는 로그인 페이지와 인증 후 리디렉션을 관리합니다.

### 1. **Spring Boot 백엔드 설정**

먼저, 백엔드에서 Spring Security를 설정하여 폼 로그인과 SSO 로그인을 처리합니다.

#### **build.gradle**

```groovy
dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}
```

#### **SecurityConfig 클래스**

```java
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

@Configuration
@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter {

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http
            .csrf().disable()  // REST API에서는 CSRF 보호를 끄는 경우가 많습니다.
            .authorizeRequests()
                .antMatchers("/", "/login", "/oauth2/**").permitAll()  // 로그인 페이지 및 OAuth2 URL은 모두 허용
                .anyRequest().authenticated()  // 나머지 모든 요청은 인증 필요
                .and()
            .formLogin()
                .loginProcessingUrl("/api/login")  // 로그인 폼의 처리 URL (React에서 호출)
                .defaultSuccessUrl("/home", true)  // 로그인 성공 시 이동할 URL
                .permitAll()
                .and()
            .oauth2Login()
                .loginPage("/login")  // OAuth2 로그인 페이지
                .defaultSuccessUrl("/home", true)  // SSO 로그인 성공 시 이동할 URL
                .and()
            .logout()
                .logoutUrl("/api/logout")  // 로그아웃 처리 URL (React에서 호출)
                .logoutSuccessUrl("/login")
                .permitAll();
    }

    @Override
    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
        auth.inMemoryAuthentication()
            .withUser("user")
                .password(passwordEncoder().encode("password"))
                .roles("USER")
            .and()
            .withUser("admin")
                .password(passwordEncoder().encode("admin"))
                .roles("ADMIN");
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }
}
```

### 2. **React 프론트엔드 설정**

React에서는 Spring Boot의 백엔드와 통신하기 위해 Axios 또는 Fetch API를 사용하여 로그인과 로그아웃 요청을 전송하고, 사용자의 인증 상태에 따라 페이지를 렌더링합니다.

#### **React 프로젝트 생성 및 설정**

React 프로젝트를 생성하고 필요한 패키지를 설치합니다.

```bash
npx create-react-app react-login-example
cd react-login-example
npm install axios react-router-dom
```

#### **Login 페이지**

`Login.js` 파일을 생성하여 로그인 폼과 OAuth2 버튼을 제공합니다.

```jsx
import React, { useState } from 'react';
import axios from 'axios';
import { useHistory } from 'react-router-dom';

const Login = () => {
    const [username, setUsername] = useState('');
    const [password, setPassword] = useState('');
    const history = useHistory();

    const handleLogin = async (e) => {
        e.preventDefault();
        try {
            await axios.post('/api/login', null, {
                params: {
                    username: username,
                    password: password
                }
            });
            history.push('/home');
        } catch (error) {
            console.error('Login failed', error);
        }
    };

    return (
        <div>
            <h2>Login</h2>
            <form onSubmit={handleLogin}>
                <div>
                    <label>Username:</label>
                    <input
                        type="text"
                        value={username}
                        onChange={(e) => setUsername(e.target.value)}
                    />
                </div>
                <div>
                    <label>Password:</label>
                    <input
                        type="password"
                        value={password}
                        onChange={(e) => setPassword(e.target.value)}
                    />
                </div>
                <button type="submit">Login</button>
            </form>

            <div>
                <a href="/oauth2/authorization/google">Login with Google</a>
            </div>
        </div>
    );
};

export default Login;
```

### **설명**:
- **handleLogin**: 폼 제출 시 `/api/login`으로 POST 요청을 전송하여 서버에서 인증을 처리합니다. 인증이 성공하면 `/home`으로 리디렉션합니다.
- **OAuth2 로그인 링크**: Google OAuth2 로그인을 위해 서버에 미리 설정된 `/oauth2/authorization/google` 경로로 이동합니다.

#### **Home 페이지**

로그인 후 이동할 홈 페이지입니다.

```jsx
import React from 'react';

const Home = () => {
    return (
        <div>
            <h2>Welcome to the Home Page</h2>
            <a href="/api/logout">Logout</a>
        </div>
    );
};

export default Home;
```

### **설명**:
- **Logout**: 사용자가 로그아웃을 클릭하면 `/api/logout`으로 요청이 전송되며, 로그아웃 후 `/login`으로 리디렉션됩니다.

#### **React Router 설정**

`App.js`에서 React Router를 설정합니다.

```jsx
import React from 'react';
import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';
import Login from './Login';
import Home from './Home';

function App() {
    return (
        <Router>
            <Switch>
                <Route path="/login" component={Login} />
                <Route path="/home" component={Home} />
                <Route path="/" exact component={Login} />
            </Switch>
        </Router>
    );
}

export default App;
```

### **설명**:
- **Router**: React Router를 사용하여 `/login`, `/home` 등의 경로를 관리합니다. 기본 경로 `/`로 접근할 때는 로그인 페이지로 리디렉션됩니다.

### 3. **결론**

이 설정을 통해 Spring Boot 백엔드에서 폼 기반 로그인과 OAuth2 기반 SSO 로그인을 모두 지원하면서, React 프론트엔드에서 해당 로그인 기능을 구현할 수 있습니다. React가 백엔드와 상호작용하면서 사용자의 인증 상태를 관리하며, 인증된 사용자는 적절한 페이지로 리디렉션됩니다.

Spring Security는 로그인 처리와 같은 인증 기능을 제공하고, React는 사용자 인터페이스를 관리하여 유연하고 강력한 웹 애플리케이션을 구축할 수 있습니다.





아래의 내용은 Spring Security 설정과 OAuth2 Bearer Access Token을 사용하는 예제입니다. 이 설정을 통해 Kerberos 인증을 기반으로 발급된 JWT Bearer Access Token을 사용하여 보호된 API에 접근할 수 있도록 합니다.

### 1. Spring Security 설정

Spring Security를 사용하여 API에 Bearer Access Token을 통해 접근할 수 있도록 설정합니다.

#### 1.1. Spring Security 설정 클래스

```java
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.config.http.SessionCreationPolicy;

@Configuration
@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter {

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http
            .authorizeRequests()
                .antMatchers("/api/**").authenticated()  // '/api/**'로 시작하는 모든 요청은 인증 필요
                .anyRequest().permitAll()
                .and()
            .oauth2ResourceServer()
                .bearerTokenResolver(tokenResolver())  // Bearer Access Token을 사용한 인증 설정
                .jwt()
                .and()
            .sessionManagement()
                .sessionCreationPolicy(SessionCreationPolicy.STATELESS);  // 세션을 사용하지 않음
    }

    @Bean
    public CustomBearerTokenResolver tokenResolver() {
        return new CustomBearerTokenResolver();
    }
}
```

- **`/api/**` 경로 보호**: 이 설정으로 `/api/**` 경로로 들어오는 모든 요청은 Bearer Access Token을 통해 인증된 사용자만 접근할 수 있습니다.
- **JWT 설정**: `oauth2ResourceServer()` 메서드를 통해 Bearer Access Token을 사용하는 JWT 기반 인증을 설정합니다.
- **세션 비활성화**: `SessionCreationPolicy.STATELESS` 설정을 통해 서버에서 세션을 사용하지 않고, 각 요청이 독립적으로 인증되도록 합니다.

#### 1.2. CustomBearerTokenResolver 클래스

`BearerTokenResolver`는 Authorization 헤더에서 Bearer Access Token을 추출하는 역할을 합니다. 기본적으로 Spring Security에서 제공하는 `BearerTokenResolver`를 사용해도 되지만, 커스텀 설정이 필요하다면 `CustomBearerTokenResolver`를 작성할 수 있습니다.

```java
import org.springframework.security.oauth2.server.resource.web.DefaultBearerTokenResolver;
import org.springframework.security.oauth2.server.resource.web.BearerTokenResolver;

public class CustomBearerTokenResolver extends DefaultBearerTokenResolver {
    // 기본 동작을 유지하거나 커스터마이징할 수 있음
}
```

여기서는 기본 제공 `DefaultBearerTokenResolver`를 사용하고 있으며, 필요에 따라 이 클래스를 확장할 수 있습니다.

### 2. OAuth2 Bearer Access Token 발급 및 사용

Kerberos 기반의 인증을 통해 발급받은 JWT Bearer Access Token을 사용하여 보호된 API에 접근합니다.

#### 2.1. Kerberos 토큰을 사용하여 JWT Bearer Access Token 발급

이전의 `OAuthService` 클래스를 사용하여 Kerberos 토큰을 통해 서드파티 서버로부터 JWT Bearer Access Token을 발급받습니다.

```java
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

@Service
public class OAuthService {

    private final KerberosTokenRetriever kerberosTokenRetriever;
    private final RestTemplate restTemplate;

    public OAuthService(KerberosTokenRetriever kerberosTokenRetriever) {
        this.kerberosTokenRetriever = kerberosTokenRetriever;
        this.restTemplate = new RestTemplate();
    }

    public String getAccessToken(String servicePrincipal, String tokenEndpoint) throws Exception {
        byte[] kerberosToken = kerberosTokenRetriever.getKerberosToken(servicePrincipal);

        HttpHeaders headers = new HttpHeaders();
        headers.set("Authorization", "Negotiate " + new String(kerberosToken));

        HttpEntity<String> entity = new HttpEntity<>(headers);

        ResponseEntity<String> response = restTemplate.exchange(
                tokenEndpoint,
                HttpMethod.POST,
                entity,
                String.class
        );

        // Bearer Access Token 반환
        return response.getBody();
    }
}
```

#### 2.2. 발급받은 Bearer Access Token을 API 요청에 사용

Bearer Access Token을 API 요청 시 Authorization 헤더에 추가하여 보호된 API에 접근합니다.

```java
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class ProtectedApiController {

    @GetMapping("/api/protected")
    public String accessProtectedResource(@RequestHeader("Authorization") String authorizationHeader) {
        // Bearer Access Token을 기반으로 보호된 리소스에 접근
        return "Access granted to protected resource with token: " + authorizationHeader;
    }
}
```

이 컨트롤러는 `/api/protected` 경로에 접근할 때 Authorization 헤더에 Bearer Access Token이 포함되어 있어야만 접근을 허용합니다.

### 3. 결론

Spring Boot에서 Spring Security를 사용해 Kerberos 기반 OAuth2 Bearer Access Token 인증을 설정하고, 보호된 API 엔드포인트에 대한 접근을 제어할 수 있습니다. JWT 기반의 Bearer Access Token을 사용하여 API 호출 시 권한이 있는 사용자만 접근할 수 있도록 하는 이 설정은, 특히 보안이 중요한 애플리케이션에서 유용합니다. 각 요청은 Bearer Access Token을 사용해 인증되므로, 서버는 Stateless한 방식으로 요청을 처리할 수 있습니다.