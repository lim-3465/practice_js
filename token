아래의 내용은 Spring Security 설정과 OAuth2 Bearer Access Token을 사용하는 예제입니다. 이 설정을 통해 Kerberos 인증을 기반으로 발급된 JWT Bearer Access Token을 사용하여 보호된 API에 접근할 수 있도록 합니다.

### 1. Spring Security 설정

Spring Security를 사용하여 API에 Bearer Access Token을 통해 접근할 수 있도록 설정합니다.

#### 1.1. Spring Security 설정 클래스

```java
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.config.http.SessionCreationPolicy;

@Configuration
@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter {

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http
            .authorizeRequests()
                .antMatchers("/api/**").authenticated()  // '/api/**'로 시작하는 모든 요청은 인증 필요
                .anyRequest().permitAll()
                .and()
            .oauth2ResourceServer()
                .bearerTokenResolver(tokenResolver())  // Bearer Access Token을 사용한 인증 설정
                .jwt()
                .and()
            .sessionManagement()
                .sessionCreationPolicy(SessionCreationPolicy.STATELESS);  // 세션을 사용하지 않음
    }

    @Bean
    public CustomBearerTokenResolver tokenResolver() {
        return new CustomBearerTokenResolver();
    }
}
```

- **`/api/**` 경로 보호**: 이 설정으로 `/api/**` 경로로 들어오는 모든 요청은 Bearer Access Token을 통해 인증된 사용자만 접근할 수 있습니다.
- **JWT 설정**: `oauth2ResourceServer()` 메서드를 통해 Bearer Access Token을 사용하는 JWT 기반 인증을 설정합니다.
- **세션 비활성화**: `SessionCreationPolicy.STATELESS` 설정을 통해 서버에서 세션을 사용하지 않고, 각 요청이 독립적으로 인증되도록 합니다.

#### 1.2. CustomBearerTokenResolver 클래스

`BearerTokenResolver`는 Authorization 헤더에서 Bearer Access Token을 추출하는 역할을 합니다. 기본적으로 Spring Security에서 제공하는 `BearerTokenResolver`를 사용해도 되지만, 커스텀 설정이 필요하다면 `CustomBearerTokenResolver`를 작성할 수 있습니다.

```java
import org.springframework.security.oauth2.server.resource.web.DefaultBearerTokenResolver;
import org.springframework.security.oauth2.server.resource.web.BearerTokenResolver;

public class CustomBearerTokenResolver extends DefaultBearerTokenResolver {
    // 기본 동작을 유지하거나 커스터마이징할 수 있음
}
```

여기서는 기본 제공 `DefaultBearerTokenResolver`를 사용하고 있으며, 필요에 따라 이 클래스를 확장할 수 있습니다.

### 2. OAuth2 Bearer Access Token 발급 및 사용

Kerberos 기반의 인증을 통해 발급받은 JWT Bearer Access Token을 사용하여 보호된 API에 접근합니다.

#### 2.1. Kerberos 토큰을 사용하여 JWT Bearer Access Token 발급

이전의 `OAuthService` 클래스를 사용하여 Kerberos 토큰을 통해 서드파티 서버로부터 JWT Bearer Access Token을 발급받습니다.

```java
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

@Service
public class OAuthService {

    private final KerberosTokenRetriever kerberosTokenRetriever;
    private final RestTemplate restTemplate;

    public OAuthService(KerberosTokenRetriever kerberosTokenRetriever) {
        this.kerberosTokenRetriever = kerberosTokenRetriever;
        this.restTemplate = new RestTemplate();
    }

    public String getAccessToken(String servicePrincipal, String tokenEndpoint) throws Exception {
        byte[] kerberosToken = kerberosTokenRetriever.getKerberosToken(servicePrincipal);

        HttpHeaders headers = new HttpHeaders();
        headers.set("Authorization", "Negotiate " + new String(kerberosToken));

        HttpEntity<String> entity = new HttpEntity<>(headers);

        ResponseEntity<String> response = restTemplate.exchange(
                tokenEndpoint,
                HttpMethod.POST,
                entity,
                String.class
        );

        // Bearer Access Token 반환
        return response.getBody();
    }
}
```

#### 2.2. 발급받은 Bearer Access Token을 API 요청에 사용

Bearer Access Token을 API 요청 시 Authorization 헤더에 추가하여 보호된 API에 접근합니다.

```java
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class ProtectedApiController {

    @GetMapping("/api/protected")
    public String accessProtectedResource(@RequestHeader("Authorization") String authorizationHeader) {
        // Bearer Access Token을 기반으로 보호된 리소스에 접근
        return "Access granted to protected resource with token: " + authorizationHeader;
    }
}
```

이 컨트롤러는 `/api/protected` 경로에 접근할 때 Authorization 헤더에 Bearer Access Token이 포함되어 있어야만 접근을 허용합니다.

### 3. 결론

Spring Boot에서 Spring Security를 사용해 Kerberos 기반 OAuth2 Bearer Access Token 인증을 설정하고, 보호된 API 엔드포인트에 대한 접근을 제어할 수 있습니다. JWT 기반의 Bearer Access Token을 사용하여 API 호출 시 권한이 있는 사용자만 접근할 수 있도록 하는 이 설정은, 특히 보안이 중요한 애플리케이션에서 유용합니다. 각 요청은 Bearer Access Token을 사용해 인증되므로, 서버는 Stateless한 방식으로 요청을 처리할 수 있습니다.