import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.attribute.BasicFileAttributes;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@SpringBootApplication
@RestController
public class FileDetailsApplication {

    private static final Map<String, String> pathDatePatterns = new HashMap<>();

    static {
        // 여기에 경로별 날짜 패턴을 설정합니다.
        pathDatePatterns.put("<path1>", "<datePattern1>");
        pathDatePatterns.put("<path2>", "<datePattern2>");
        // 예시: pathDatePatterns.put("/documents/reports", "\\d{4}-\\d{2}-\\d{2}");
    }

    public static void main(String[] args) {
        SpringApplication.run(FileDetailsApplication.class, args);
    }

    @GetMapping("/files")
    public List<String> listFilesDetails() throws Exception {
        List<String> filesDetails = new ArrayList<>();
        ObjectMapper objectMapper = new ObjectMapper();
        
        for (String path : pathDatePatterns.keySet()) {
            File folder = new File(path);
            File[] listOfFiles = folder.listFiles();
            
            for (File file : listOfFiles) {
                if (file.isFile()) {
                    BasicFileAttributes attrs = Files.readAttributes(file.toPath(), BasicFileAttributes.class);
                    FileDetails details = new FileDetails(
                        file.getName(),
                        getFileDateFromName(file.getName(), path),
                        file.length(),
                        attrs.lastModifiedTime().toString()
                    );
                    String json = objectMapper.writeValueAsString(details);
                    filesDetails.add(json);
                }
            }
        }
        return filesDetails;
    }

    private String getFileDateFromName(String fileName, String path) {
        String datePattern = pathDatePatterns.get(path);
        Pattern pattern = Pattern.compile(datePattern);
        Matcher matcher = pattern.matcher(fileName);
        if (matcher.find()) {
            return matcher.group();
        }
        return "Unknown"; // 날짜를 찾지 못한 경우
    }

    static class FileDetails {
        public String fileName;
        public String date;
        public long fileSize;
        public String lastModified;

        public FileDetails(String fileName, String date, long fileSize, String lastModified) {
            this.fileName = fileName;
            this.date = date;
            this.fileSize = fileSize;
            this.lastModified = lastModified;
        }
    }
}










스텝 1: Oracle DB 설정
application.properties 파일에 Oracle DB 연결 설정을 추가합니다:

properties

spring.datasource.url=jdbc:oracle:thin:@your_db_host:port:sid
spring.datasource.username=your_username
spring.datasource.password=your_password
spring.datasource.driver-class-name=oracle.jdbc.driver.OracleDriver

# JPA 설정
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.Oracle12cDialect

  
스텝 2: 엔티티 클래스(FileInfo) 정의 및 구현
java

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;

@Entity
public class FileInfo {
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private Long id;
    private String fileName;
    private String date;
    private long fileSize;
    private String lastModified;

    public FileInfo() {
    }

    public FileInfo(String fileName, String date, long fileSize, String lastModified) {
        this.fileName = fileName;
        this.date = date;
        this.fileSize = fileSize;
        this.lastModified = lastModified;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getFileName() {
        return fileName;
    }

    public void setFileName(String fileName) {
        this.fileName = fileName;
    }

    public String getDate() {
        return date;
    }

    public void setDate(String date) {
        this.date = date;
    }

    public long getFileSize() {
        return fileSize;
    }

    public void setFileSize(long fileSize) {
        this.fileSize = fileSize;
    }

    public String getLastModified() {
        return lastModified;
    }

    public void setLastModified(String lastModified) {
        this.lastModified = lastModified;
    }
}
@Entity 어노테이션은 이 클래스가 JPA 엔티티임을 나타냅니다. 즉, 이 클래스의 인스턴스들은 데이터베이스에 저장될 수 있습니다.
@Id와 @GeneratedValue 어노테이션은 이 필드가 엔티티의 기본 키(primary key)임을 나타내고, 그 값이 자동으로 생성될 것임을 지정합니다.
생성자, 게터(getter), 세터(setter) 메소드는 클래스의 인스턴스 변수에 대한 접근과 수정을 가능하게 합니다.
스텝 3: 레포지토리 인터페이스 정의
JPA를 사용하여 데이터베이스 작업을 수행할 레포지토리 인터페이스를 정의합니다.

java

import org.springframework.data.jpa.repository.JpaRepository;

public interface FileInfoRepository extends JpaRepository<FileInfo, Long> {
}



스텝 4: 서비스 계층 구현
파일 정보를 처리하고 데이터베이스에 저장하는 서비스 계층을 구현합니다.

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.util.List;

@Service // 이 클래스를 스프링의 서비스 계층 컴포넌트로 선언
public class FileInfoService {

    @Autowired // 스프링의 의존성 주입 기능을 사용하여 FileInfoRepository 인스턴스 자동 주입
    private FileInfoRepository fileInfoRepository;

    // 모든 FileInfo 엔티티를 데이터베이스에서 조회하는 메소드
    public List<FileInfo> findAll() {
        return fileInfoRepository.findAll(); // JpaRepository의 findAll 메소드를 호출하여 모든 파일 정보 조회
    }

    // 새 FileInfo 엔티티를 데이터베이스에 저장하거나, 기존 엔티티를 업데이트하는 메소드
    public FileInfo save(FileInfo fileInfo) {
        return fileInfoRepository.save(fileInfo); // JpaRepository의 save 메소드를 호출하여 파일 정보 저장 또는 업데이트
    }

    // 파일 정보를 ID를 기준으로 조회하는 메소드 (추가 예시)
    public FileInfo findById(Long id) {
        return fileInfoRepository.findById(id) // JpaRepository의 findById 메소드를 호출하여 ID로 파일 정보 조회
                .orElseThrow(() -> new RuntimeException("File not found with id " + id)); // 조회된 정보가 없을 경우 예외 발생
    }

    // 파일 정보를 ID를 기준으로 삭제하는 메소드 (추가 예시)
    public void deleteById(Long id) {
        fileInfoRepository.deleteById(id); // JpaRepository의 deleteById 메소드를 호출하여 ID로 파일 정보 삭제
    }
}


스텝 5: 컨트롤러 계층 수정
컨트롤러에서 서비스 계층을 호출하여 파일 정보를 처리하고, 웹 페이지에 표시하도록 수정합니다.

java

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;

@Controller
public class FileInfoController {

    @Autowired
    private FileInfoService fileInfoService;

    @GetMapping("/files")
    public String listFiles(Model model) {
        model.addAttribute("files", fileInfoService.findAll());
        return "files"; // Thymeleaf 템플릿 이름
    }

    // 파일 정보를 DB에 저장하는 엔드포인트 추가 가능
}


@Service
public class MyService {
    private final MyRepository repository;

    @Autowired
    public MyService(MyRepository repository) {
        this.repository = repository;
    }

    // 사용 예시
    public void someMethod() {
        repository.save(new MyEntity());
    }
}
