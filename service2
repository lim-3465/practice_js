1단계: FileProcessingTask 객체 확장
FileProcessingTask 객체에 파일 경로, 정규식 패턴, 파일 타입을 저장할 필드를 추가합니다. 여기서 정규식 패턴은 파일 타입을 결정하는 데 사용됩니다.


public class FileProcessingTask {
    private Path filePath;
    private Map<String, String> regexPatterns; // Key: 파일 타입, Value: 정규식 패턴
    private String fileType; // 정규식에 따라 결정된 파일 타입

    // 생성자, 게터, 세터 생략
}
2단계: 파일 타입 판별 로직 구현
파일 이름을 입력 받아, FileProcessingTask에 정의된 정규식 패턴들과 비교하여 파일 타입을 결정하는 로직을 구현합니다.


public class FileTypeDeterminer {

    public static String determineFileType(FileProcessingTask task, String fileName) {
        for (Map.Entry<String, String> entry : task.getRegexPatterns().entrySet()) {
            if (fileName.matches(entry.getValue())) {
                return entry.getKey(); // 정규식과 일치하는 파일 타입을 반환
            }
        }
        return "unknown"; // 일치하는 패턴이 없는 경우
    }
}
3단계: 파일 처리 및 데이터베이스 저장 로직 구현
파일을 처리하고, 파일 타입을 결정한 후, 결과를 데이터베이스에 저장하는 로직을 구현합니다. 여기서는 FileRecord 엔티티와 FileRecordRepository를 사용하여 파일 처리 결과를 저장합니다.


@Service
public class FileProcessingService {

    @Autowired
    private FileRecordRepository fileRecordRepository;

    public void processFile(FileProcessingTask task) {
        String fileName = task.getFilePath().getFileName().toString();
        String fileType = FileTypeDeterminer.determineFileType(task, fileName);

        FileRecord record = new FileRecord();
        record.setFileName(fileName);
        record.setFilePath(task.getFilePath().toString());
        record.setFileType(fileType);
        // 기타 필요한 정보 세팅

        fileRecordRepository.save(record); // 데이터베이스에 저장
    }
}
