파일 처리 및 데이터 저장 로직
하루에 한 번 실행되는 파일 처리 작업에서 이미 처리한 파일을 다시 읽지 않도록 관리하려면, 처리한 파일의 메타데이터(예: 파일 이름, 처리 날짜 등)를 데이터베이스에 저장하고 관리해야 합니다. 이를 위해 두 가지 주요 구성 요소가 필요합니다:

파일 처리 기록을 저장할 엔티티: 파일의 이름, 경로, 처리 날짜 등을 저장할 수 있는 엔티티가 필요합니다.
파일 처리 기록 관리 로직: 파일을 처리하기 전에 데이터베이스에서 해당 파일의 처리 기록을 조회하여 이미 처리된 파일인지 확인하고, 처리 후에는 새로운 처리 기록을 데이터베이스에 저장하는 로직이 필요합니다.
파일 처리 기록 엔티티 (FileProcessLog.java)
java
Copy code
import javax.persistence.*;
import java.time.LocalDate;

@Entity
public class FileProcessLog {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String fileName;
    private LocalDate processDate;

    // 생성자, 게터, 세터 생략
}
파일 처리 기록 리포지토리 (FileProcessLogRepository.java)
java
Copy code
import org.springframework.data.jpa.repository.JpaRepository;

public interface FileProcessLogRepository extends JpaRepository<FileProcessLog, Long> {
    boolean existsByFileNameAndProcessDate(String fileName, LocalDate processDate);
}
파일 처리 및 기록 관리 로직
java
Copy code
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import java.nio.file.*;
import java.time.LocalDate;

public class FileProcessingService {

    @Autowired
    private FileProcessLogRepository logRepository;

    // 매일 실행되는 스케줄링된 메소드
    @Scheduled(cron = "0 0 1 * * ?") // 매일 새벽 1시에 실행
    public void scheduledFileProcessing() {
        List<Path> paths = // 폴더 경로를 조회하는 로직
        paths.forEach(this::processFile);
    }

    private void processFile(Path path) {
        String fileName = path.getFileName().toString();
        LocalDate today = LocalDate.now();
        if (!logRepository.existsByFileNameAndProcessDate(fileName, today)) {
            // 파일 처리 로직 (파일 읽기, 컨텐츠 파싱 등)

            // 처리 기록을 데이터베이스에 저장
            FileProcessLog log = new FileProcessLog();
            log.setFileName(fileName);
            log.setProcessDate(today);
            logRepository.save(log);
        }
    }
}
이 구조를 통해, 파일 처리 서비스는 매일 정해진 시간에 실행되며, 이미 처리된 파일은 다시 처리하지 않고, 처리된 파일의 정보를 데이터베이스에 기록합니다. 이렇게 하면 파일 처리 상태를 효과적으로 관리하며 중복 처리를 방지할 수 있습니다.
