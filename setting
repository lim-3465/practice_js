dependencies {
    implementation 'com.h2database:h2:1.4.200'
    // 기타 필요한 스프링 부트 및 프로젝트 의존성
}



# H2 데이터베이스 연결 설정
spring.datasource.url=jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;MODE=MySQL
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=

# H2 콘솔 활성화
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console




서비스레이어 디티오 사용 예시

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class PersonService {
    @Autowired
    private PersonRepository personRepository;

    public void addPersonFromDto(PersonDto personDto) {
        Person person = new Person();
        person.setName(personDto.getName());
        person.setAge(personDto.getAge());
        personRepository.save(person);
    }
}

ㅇㅔㄴ티티 도메인 정의

package com.yourcompany.yourproject.domain;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;

@Entity
public class Person {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String name;
    private int age;

    // 생성자, 게터, 세터
    public Person() {}

    public Person(String name, int age) {
        this.name = name;
        this.age = age;
    }

    // 게터와 세터 메소드 생략
}

리포지토리 인터페이스 생성

package com.yourcompany.yourproject.repository;

import com.yourcompany.yourproject.domain.Person;
import org.springframework.data.jpa.repository.JpaRepository;

public interface PersonRepository extends JpaRepository<Person, Long> {
}




서비스계층 구현

package com.yourcompany.yourproject.service;

import com.yourcompany.yourproject.domain.Person;
import com.yourcompany.yourproject.dto.PersonDto;
import com.yourcompany.yourproject.repository.PersonRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class PersonService {
    private final PersonRepository personRepository;

    @Autowired
    public PersonService(PersonRepository personRepository) {
        this.personRepository = personRepository;
    }

    public void addPerson(PersonDto personDto) {
        Person person = new Person(personDto.getName(), personDto.getAge());
        personRepository.save(person);
    }
}

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
1. H2 Database 의존성 추가
먼저, Spring Boot 프로젝트의 pom.xml 파일에 H2 Database 의존성을 추가합니다.

xml
Copy code
<dependency>
    <groupId>com.h2database</groupId>
    <artifactId>h2</artifactId>
    <scope>runtime</scope>
</dependency>
2. H2 Database 설정
application.properties 또는 application.yml 파일에 H2 데이터베이스와 관련된 설정을 추가합니다. 여기서는 H2 데이터베이스의 웹 콘솔을 활성화하는 설정을 포함합니다.

application.properties 예시:

properties
Copy code
# H2 Database 설정
spring.datasource.url=jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

# H2 콘솔 활성화
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console
3. 엔티티 및 레포지토리 정의
엔티티 FileMetaInfo와 FileContent, 그리고 각각에 대한 레포지토리 FileMetaInfoRepository와 FileContentRepository를 정의합니다. 이전 단계에서 설명한 대로 엔티티와 레포지토리를 구성합니다.

4. 데이터 초기화
개발이나 테스트 목적으로, 애플리케이션 시작 시 H2 데이터베이스에 초기 데이터를 로드하고 싶을 수 있습니다. 이를 위해 data.sql 파일을 src/main/resources 디렉토리에 생성하고 초기 SQL 쿼리를 포함시킬 수 있습니다.

data.sql 예시:

sql
Copy code
INSERT INTO file_meta_info (id, file_name, creation_date) VALUES (1, 'testfile.txt', '2023-01-01');
INSERT INTO file_content (id, user_name, user_id, date, file_meta_info_id) VALUES (1, 'John Doe', 'user01', '2023-01-01', 1);
5. H2 콘솔 접근 및 쿼리 실행
애플리케이션을 실행한 후, 웹 브라우저에서 H2 데이터베이스 콘솔에 접근합니다. 기본 URL은 http://localhost:8080/h2-console 입니다.

H2 콘솔에서 접속 정보를 입력합니다. JDBC URL, 사용자 이름, 비밀번호 등을 application.properties 파일에 설정한 값으로 맞춥니다. 접속 후 SQL 명령어를 사용하여 데이터를 조회하거나 조작할 수 있습니다.

sql
Copy code
SELECT * FROM file_meta_info;
SELECT * FROM file_content;
이 과정을 통해 Spring Boot 애플리케이션에서 H2 데이터베이스를 설정하고, 웹 콘솔을 통해 데이터베이스를 쉽게 조회하고 관리할 수 있습니다. H2 데이터베이스는 개발 및 테스트 단계에서 빠르고 간편하게 데이터베이스 환경을 구성할 수 있게 해주는 훌륭한 옵션입니다.


